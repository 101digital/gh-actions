name: Sanitization checks (java)

on:
  workflow_call:

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    name: pre-commit
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Run pre-commit checks on delta changes
        id: pre-commit-delta
        uses: pre-commit/action@v3.0.0
        with:
          extra_args: -v --from-ref ${{ github.event.pull_request.base.sha }} --to-ref ${{ github.event.pull_request.head.sha }}

      - name: add-pre-commit-comment
        id: comment
        uses: actions/github-script@v6
        if: ${{ github.event_name == 'pull_request' &&  always() }}
        with:
          script: |
            const pr = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            };
            const {data: reviews} = await github.rest.pulls.listReviews(pr);
            let review = reviews.find(review => {
              return (
                (review?.user?.login ?? '') == 'github-actions[bot]' &&
                (review?.body ?? '').startsWith('#### Pre commit checks')
              )
            });
            const precommitstep = "5:1";
            const list = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            const output = `#### Pre commit checks ðŸ“– \`${{ steps.pre-commit-delta.outcome }}\`

            <a href="`+list.data.jobs[0].html_url+`#step:`+precommitstep+`">Link to Precommit check run output</a>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            if (review === undefined) {
              github.rest.pulls.createReview({
                ...pr,
                body: output,
                event: "COMMENT",
              });
            } else {
              github.rest.pulls.updateReview({
                ...pr,
                body: output,
                review_id: review.id
              });
            }
  conventional-pr-title:
    name: convential pr title
    runs-on: ubuntu-latest
    steps:
      - uses: amannn/action-semantic-pull-request@v5
        id: lint-pr-title
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: add-pr-title-comment
        id: comment
        uses: actions/github-script@v6
        if: ${{ github.event_name == 'pull_request' && always() }}
        with:
          script: |
            const pr = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            };
            const {data: reviews} = await github.rest.pulls.listReviews(pr);
            let review = reviews.find(review => {
              return (
                (review?.user?.login ?? '') == 'github-actions[bot]' &&
                (review?.body ?? '').startsWith('#### PR title checks')
              )
            });
            const output = `#### PR title checks ðŸ“– \`${{ steps.lint-pr-title.outcome }}\`

            <details>
              <summary>PR title should follow Conventional Commits</summary>
              ${{ steps.lint-pr-title.outputs.error_message }}
            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            if (review === undefined) {
              github.rest.pulls.createReview({
                ...pr,
                body: output,
                event: "COMMENT",
              });
            } else {
              github.rest.pulls.updateReview({
                ...pr,
                body: output,
                review_id: review.id
              });
            }
  sonarqube-scan:
    runs-on: sonar-runner
    name: sonarqube-scan
    env:
      SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
    steps:
      - name: Get Repo Name
        id: extract_repo_name
        run: echo "repo_name=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)" >> $GITHUB_OUTPUT
        #run: echo "::set-output name=repo_name::$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)"
        
      - name: Read groupId from POM
        id: extract_group_id
        run: |
          groupId=$(xmllint --xpath "/*[local-name()='project']/*[local-name()='groupId']/text()" pom.xml)
          echo "group_id=$groupId" >> $GITHUB_OUTPUT
        #echo "::set-output name=group_id::$groupId"

      - name: clean folder
        run: rm -rf ${{ steps.extract_repo_name.outputs.repo_name }}
        
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      #- name: Setup SonarQube
      #  uses: warchant/setup-sonar-scanner@v7

      - name: Application build
        run: mvn -s /home/ec2-user/settings.xml  clean install -DskipTests=true

      - name: ls -la
        run: ls -la
          
      - name: SonarQube Scan
        run: |
          mvn -s /home/ec2-user/settings.xml sonar:sonar \
            -Dsonar.login=sqa_6ccf9076e3232d26d59697d340651f99b0ce5bf5  \
            -Dsonar.projectKey="${{ steps.extract_group_id.outputs.group_id }}:${{ steps.extract_repo_name.outputs.repo_name }}" \
            -Dsonar.projectName=${{ steps.extract_repo_name.outputs.repo_name }} \
            -Dsonar.host.url=https://sonarqube.101digital.io \
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} \
            -Dsonar.pullrequest.branch=${{ github.event.pull_request.head.ref }} \
            -Dsonar.pullrequest.base=${{ github.event.pull_request.base.ref }} 

      - name: Check Quality Gate Status
        id: check_quality_gate
        run: |
          sleep 20s
          PR_NUM=${{ github.event.pull_request.number }}
          PROJECT_KEY=${{ steps.extract_group_id.outputs.group_id }}:${{ steps.extract_repo_name.outputs.repo_name }}
          SONAR_URL="https://sonarqube.101digital.io/api/qualitygates/project_status?projectKey=$PROJECT_KEY&pullRequest=$PR_NUM"
          QUALITY_GATE_STATUS=$(curl -s -u sqa_6ccf9076e3232d26d59697d340651f99b0ce5bf5: "$SONAR_URL" | jq -r '.projectStatus.status')

          echo "Quality Gate Status: $QUALITY_GATE_STATUS"
          echo "::set-output name=quality_gate_status::$QUALITY_GATE_STATUS"

        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Fail if Quality Gate Failed
        if: steps.check_quality_gate.outputs.quality_gate_status != 'OK'
        run: exit 1
